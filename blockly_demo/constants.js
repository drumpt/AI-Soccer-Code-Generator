var PLAYERS_P1 = 
'#!/usr/bin/python3\n'
+ '\n'
+ '# File: players.py\n'
+ '# Date: February 03, 2019\n'
+ '# Description: Player functions for the Robot Soccer Strategy App\n'
+ '# Author(s): Luiz Felipe Vecchietti\n'
+ '\n'
+ 'import math\n'
+ '\n'
+ 'import helper\n'
+ '\n'
+ '#reset_reason\n'
+ 'NONE = 0\n'
+ 'GAME_START = 1\n'
+ 'SCORE_MYTEAM = 2\n'
+ 'SCORE_OPPONENT = 3\n'
+ 'GAME_END = 4\n'
+ 'DEADLOCK = 5\n'
+ 'GOALKICK = 6\n'
+ 'CORNERKICK = 7\n'
+ 'PENALTYKICK = 8\n'
+ 'HALFTIME = 9\n'
+ 'EPISODE_END = 10\n'
+ '\n'
+ '#game_state\n'
+ 'STATE_DEFAULT = 0\n'
+ 'STATE_BACKPASS = 1\n'
+ 'STATE_GOALKICK = 2\n'
+ 'STATE_CORNERKICK = 3\n'
+ 'STATE_PENALTYKICK = 4\n'
+ '\n'
+ '#coordinates\n'
+ 'MY_TEAM = 0\n'
+ 'OP_TEAM = 1\n'
+ 'BALL = 2\n'
+ 'X = 0\n'
+ 'Y = 1\n'
+ 'TH = 2\n'
+ 'ACTIVE = 3\n'
+ 'TOUCH = 4\n'
+ '\n'
+ 'class Goalkeeper:\n'
+ '\n'
+ '    def __init__(self, field, goal, penalty_area, goal_area, robot_size, max_linear_velocity):\n'
+ '        self.field = field\n'
+ '        self.goal = goal\n'
+ '        self.penalty_area = penalty_area\n'
+ '        self.goal_area = goal_area\n'
+ '        self.robot_size = robot_size\n'
+ '        self.max_linear_velocity = max_linear_velocity\n'
+ '\n'
+ '    def move(self, id, idx, idx_opp, defense_angle, attack_angle, cur_posture, cur_posture_opp, previous_ball, cur_ball, predicted_ball):\n';

var PLAYERS_P2 = 
'\n'
+ '        return helper.go_to(id, x, y, cur_posture, cur_ball, self.max_linear_velocity)\n'
+ '\n'
+ 'class Defender_1:\n'
+ '\n'
+ '    def __init__(self, field, goal, penalty_area, goal_area, robot_size, max_linear_velocity):\n'
+ '        self.field = field\n'
+ '        self.goal = goal\n'
+ '        self.penalty_area = penalty_area\n'
+ '        self.goal_area = goal_area\n'
+ '        self.robot_size = robot_size\n'
+ '        self.max_linear_velocity = max_linear_velocity\n'
+ '\n'
+ '    def move(self, id, idx, idx_opp, defense_angle, attack_angle, cur_posture, cur_posture_opp, previous_ball, cur_ball, predicted_ball):\n';

var PLAYERS_P3 = 
'\n'
+ '        return helper.go_to(id, x, y, cur_posture, cur_ball, self.max_linear_velocity)\n'
+ '\n'
+ 'class Defender_2:\n'
+ '\n'
+ '    def __init__(self, field, goal, penalty_area, goal_area, robot_size, max_linear_velocity):\n'
+ '        self.field = field\n'
+ '        self.goal = goal\n'
+ '        self.penalty_area = penalty_area\n'
+ '        self.goal_area = goal_area\n'
+ '        self.robot_size = robot_size\n'
+ '        self.max_linear_velocity = max_linear_velocity\n'
+ '\n'
+ '    def move(self, id, idx, idx_opp, defense_angle, attack_angle, cur_posture, cur_posture_opp, previous_ball, cur_ball, predicted_ball):\n';

var PLAYERS_P4 = 
'\n'
+ '        return helper.go_to(id, x, y, cur_posture, cur_ball, self.max_linear_velocity)\n'
+ '\n'
+ 'class Forward_1:\n'
+ '\n'
+ '    def __init__(self, field, goal, penalty_area, goal_area, robot_size, max_linear_velocity):\n'
+ '        self.field = field\n'
+ '        self.goal = goal\n'
+ '        self.penalty_area = penalty_area\n'
+ '        self.goal_area = goal_area\n'
+ '        self.robot_size = robot_size\n'
+ '        self.max_linear_velocity = max_linear_velocity\n'
+ '\n'
+ '    def move(self, id, idx, idx_opp, defense_angle, attack_angle, cur_posture, cur_posture_opp, previous_ball, cur_ball, predicted_ball):\n';

var PLAYERS_P5 = 
'\n'
+ '        return helper.go_to(id, x, y, cur_posture, cur_ball, self.max_linear_velocity)\n'
+ '\n'
+ 'class Forward_2:\n'
+ '\n'
+ '    def __init__(self, field, goal, penalty_area, goal_area, robot_size, max_linear_velocity):\n'
+ '        self.field = field\n'
+ '        self.goal = goal\n'
+ '        self.penalty_area = penalty_area\n'
+ '        self.goal_area = goal_area\n'
+ '        self.robot_size = robot_size\n'
+ '        self.max_linear_velocity = max_linear_velocity\n'
+ '\n'
+ '    def move(self, id, idx, idx_opp, defense_angle, attack_angle, cur_posture, cur_posture_opp, previous_ball, cur_ball, predicted_ball):\n';

var PLAYERS_P6 = 
'\n'
+ '        return helper.go_to(id, x, y, cur_posture, cur_ball, self.max_linear_velocity)\n';