var DEFAULT_GK = 
'protection_radius = self.goal_area[Y]/2 - 0.1\n'
+ 'angle = defense_angle\n'
+ 'protection_x = math.cos(angle) * protection_radius - self.field[X]/2\n'
+ 'protection_y = math.sin(angle) * protection_radius\n'
+ 'if helper.ball_is_own_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 1\n'
+ 'elif helper.ball_is_own_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 2\n'
+ 'elif helper.ball_is_own_field(predicted_ball):\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 3\n'
+ 'elif helper.ball_is_opp_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 4\n'
+ 'elif helper.ball_is_opp_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 5\n'
+ 'else:\n'
+ '    x = protection_x\n'
+ '    y = protection_y\n'
+ '    self.flag = 6';

var DEFAULT_D1 =
'if helper.ball_is_own_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 1\n'
+ 'elif helper.ball_is_own_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 2\n'
+ 'elif helper.ball_is_own_field(predicted_ball):\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 3\n'
+ 'elif helper.ball_is_opp_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 4\n'
+ 'elif helper.ball_is_opp_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 5\n'
+ 'else:\n'
+ '    x = -1.5\n'
+ '    y = 1.5\n'
+ '    self.flag = 6';

var DEFAULT_D2 = 
'if helper.ball_is_own_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 1\n'
+ 'elif helper.ball_is_own_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 2\n'
+ 'elif helper.ball_is_own_field(predicted_ball):\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 3\n'
+ 'elif helper.ball_is_opp_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 4\n'
+ 'elif helper.ball_is_opp_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 5\n'
+ 'else:\n'
+ '    x = -1.5\n'
+ '    y = -1.5\n'
+ '    self.flag = 6';

var DEFAULT_F1 =
'if helper.ball_is_own_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 1\n'
+ 'elif helper.ball_is_own_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 2\n'
+ 'elif helper.ball_is_own_field(predicted_ball):\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 3\n'
+ 'elif helper.ball_is_opp_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 4\n'
+ 'elif helper.ball_is_opp_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 5\n'
+ 'else:\n'
+ '    x = -0.5\n'
+ '    y = 1\n'
+ '    self.flag = 6';

var DEFAULT_F2 =
'if helper.ball_is_own_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = -0.5\n'
+ '    y = -1\n'
+ '    self.flag = 1\n'
+ 'elif helper.ball_is_own_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = -0.5\n'
+ '    y = -1\n'
+ '    self.flag = 2\n'
+ 'elif helper.ball_is_own_field(predicted_ball):\n'
+ '    x = cur_ball[X]\n'
+ '    y = cur_ball[Y]\n'
+ '    self.flag = 3\n'
+ 'elif helper.ball_is_opp_goal(predicted_ball, self.field, self.goal_area):\n'
+ '    x = cur_ball[X]\n'
+ '    y = cur_ball[Y]\n'
+ '    self.flag = 4\n'
+ '    if cur_posture[id][BALL_POSSESSION]:\n'
+ '        quickpass = True\n'
+ '        self.flag = 5\n'
+ 'elif helper.ball_is_opp_penalty(predicted_ball, self.field, self.penalty_area):\n'
+ '    x = cur_ball[X]\n'
+ '    y = cur_ball[Y]\n'
+ '    self.flag = 6\n'
+ '    if cur_posture[id][BALL_POSSESSION]:\n'
+ '        cross = True\n'
+ '        self.flag = 7\n'
+ 'else:\n'
+ '    x = cur_ball[X]\n'
+ '    y = cur_ball[Y]\n'
+ '    self.flag = 8\n'
+ '    if cur_posture[id][BALL_POSSESSION]:\n'
+ '        shoot = True\n'
+ '        self.flag = 9';